{"version":3,"sources":["Components/Card.js","serviceWorker.js","Components/CardList.js","Components/SearchBox.js","Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Card","className","src","this","props","id","alt","name","email","Component","Boolean","window","location","hostname","match","CardList","cardComponent","robots","map","user","i","key","username","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","setState","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAgBeA,E,uKAZb,OACC,yBAAKC,UAAY,oDAChB,yBAAKC,IAAG,+BAA4BC,KAAKC,MAAMC,GAAvC,YAAqDC,IAAM,WACnE,6BACC,gCAAMH,KAAKC,MAAMG,KAAjB,KACA,+BAAKJ,KAAKC,MAAMI,MAAhB,W,GAPcC,aCUCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,SCFSC,E,uKAZL,IAAD,OACDC,EAAgBb,KAAKC,MAAMa,OAAOC,KAAI,SAACC,EAAMC,GAClD,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGf,GAAI,EAAKD,MAAMa,OAAOG,GAAGf,GAAIE,KAAO,EAAKH,MAAMa,OAAOG,GAAGb,KAAMe,SAAY,EAAKlB,MAAMa,OAAOG,GAAGE,SAAUd,MAAS,EAAKJ,MAAMa,OAAOG,GAAGZ,WAEhK,OACC,6BACKQ,O,GAPeP,aCYRc,E,uKAXb,OACC,yBAAKtB,UAAY,SAChB,2BAAOuB,KAAK,SACZC,YAAY,mBACZxB,UAAY,mCACZyB,SAAYvB,KAAKC,MAAMuB,oB,GAPHlB,aCUTmB,G,6KARP,OACI,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClE7B,KAAKC,MAAM6B,c,GAJPxB,cCkBNyB,E,kDAjBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAW,GAHN,E,8DAMKC,EAAOC,GACrBnC,KAAKoC,SAAS,CAACH,UAAY,M,+BAG3B,OAAGjC,KAAKgC,MAAMC,SACH,wDAEJjC,KAAKC,MAAM6B,a,GAdExB,aCmDb+B,E,kDAvCd,aAAc,IAAD,8BACZ,gBAYDC,eAAiB,SAACC,GACjB,EAAKH,SAAS,CAACI,YAAaD,EAAME,OAAOC,SAZzC,EAAKV,MAAQ,CACZlB,OAAQ,GACR0B,YAAc,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BAO/B,IAAD,EACyB/C,KAAKgC,MAA7BlB,EADD,EACCA,OAAQ0B,EADT,EACSA,YACVQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACpC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAEtD,OAAQrC,EAAOuC,OAEd,yBAAKvD,UAAY,MAChB,6CACA,kBAAC,EAAD,CAAW0B,aAAgBxB,KAAKsC,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUxB,OAAQkC,OAPA,kF,GAvBN1C,aCLlBgD,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SNyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL8B,QAAQ9B,MAAMA,EAAM+B,a","file":"static/js/main.039a2c10.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component{\n\trender(){\n\t\treturn(\n\t\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t\t<img src = {`https://robohash.org/${this.props.id}?200x200`} alt = 'robots'></img>\n\t\t\t\t<div>\n\t\t\t\t\t<h2> {this.props.name} </h2>\n\t\t\t\t\t<p> {this.props.email} </p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t}\n} \n\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport Card from './Card'\n\nclass CardList extends Component{\n\trender(){\n\t\tconst cardComponent = this.props.robots.map((user, i) => {\n\t\t\treturn <Card key = {i} id={this.props.robots[i].id} name ={this.props.robots[i].name} username = {this.props.robots[i].username} email = {this.props.robots[i].email}/>\n\t\t})\n\t\treturn(\n\t\t\t<div>\n    \t\t\t{cardComponent}\n  \t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default CardList","import React, {Component} from 'react';\n\nclass SearchBox extends Component{\n\trender(){\n\t\treturn(\n\t\t\t<div className = \"tc f1\">\n\t\t\t\t<input type=\"search\" \n\t\t\t\tplaceholder='search robots...' \n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\tonChange = {this.props.searchChange}></input>\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass Scroll extends Component{\n    render(){\n        return (\n            <div style = {{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Scroll","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(){\n        super()\n        this.state = {\n            hasError : false\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError :  true});\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1> Oops. That isn't good. </h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport { robots } from '../robots';\nimport 'tachyons';\nimport SearchBox from '../Components/SearchBox';\nimport './App.css'\nimport Scroll from '../Scroll'\nimport ErrorBoundary from '../Components/ErrorBoundary';\n\n//A parent can pass around the STATE of its children, among its children.\n//State can cause changes to our app. State usually lives in the parent component.\n//A React object executes functions in the order: constructor() -> render() -> componentDidMount()\n//and render() is called again and again every time the \"state\" object changes.\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield : ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json())\n\t\t.then(users => this.setState({ robots: users }));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value});\n\t}\n\n\trender(){\n\t\tconst { robots, searchfield } = this.state\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\treturn !robots.length?<h1> Loading 😔😔😔 </h1>:\n\t\t\t(\n\t\t\t<div className = 'tc'>\n\t\t\t\t<h1> Robofriends </h1>\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t\t);\n\t\t\n\t\t\n\t}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Components/Card'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\nReactDOM.render(\n\t<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}